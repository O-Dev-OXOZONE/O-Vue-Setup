stages:
  - prepare
  - test
  - build
  - deploy

prepare:
  image: node:16
  stage: prepare
  script:
    - npm install
  cache:
    untracked: true
    paths:
      - node_modules
  artifacts:
    expire_in: 1 hour
    when: always
    untracked: true
    paths:
      - node_modules
      - package-lock.json

lint:
  image: node:16
  stage: test
  dependencies:
    - prepare
  script:
    - npm run lint

format:
  image: node:16
  stage: test
  dependencies:
    - prepare
  script:
    - npm run format:check

build:
  image: node:16
  stage: test
  dependencies:
    - prepare
  script:
    - npm run build

test:
  image: node:16
  stage: test
  dependencies:
    - prepare
  script:
    - npm run test:ci
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  cache:
    paths:
      - coverage/
  artifacts:
    paths:
      - coverage/
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

Build Prod:
  stage: build
  image: atnartur/docker:latest
  only:
    - main
  script:
    - docker-compose -f docker-compose.prod.yml build
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker-compose -f docker-compose.prod.yml push

Deploy Prod:
  stage: deploy
  image: atnartur/docker:latest
  only:
    - main
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker-compose -f docker-compose.prod.yml pull
    - docker-compose -f docker-compose.prod.yml up -d
